#!/usr/bin/perl
#
#
#    Copyright (c) 2010, Andris Kalnozols <andris@hpl.hp.com>
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#
#    Originally written by Paul Albitz and Ken Stone of Hewlett-Packard
#    h2n-hp,v 1.96 1999/12/02 22:05:56 milli (Michael Milligan), Hewlett-Packard
#    Extended to v 2.61rc8 2010-08-31 by Andris Kalnozols, HP Labs
#
# NAME
#
#    h2n      - Translate host table to name server file format
#    delegate - Create/check delegation information (zone linkage)
#
# SYNOPSIS
#
#    h2n      -d DOMAIN -n NET -u CONTACT [options]
#    delegate -d DOMAIN -n NET -u CONTACT [options]
#

use strict;
use warnings;
use Cwd;		# for calling `getcwd'
use FileHandle;		# for calling `autoflush'
use Symbol;		# for calling `qualify'
use Sys::Hostname;	# for calling `hostname'

# Various defaults
#
my $VERSION = "2.61rc8";
my $Program = $0;
   $Program =~ s/.*\///;
my $Delegate = ($Program =~ /delegate/ ? 1 : 0);
my $Host = hostname();
my $Do_CNAME = 1;
my $Do_MX = "[mx]";
my $Do_Zone_Apex_MX = 0;
my $Do_WKS = 0;
my $Do_TXT = 0;
my $Quoted_Txt_Preferred = 0;
my $Quoted_Txt_Only = 0;
my $Do_RP = 0;
my $Bootfile = "named.boot";
my $Conffile = "named.conf";
my $New_Fmt_Conffile = 0;
my $Conf_Prefile = "";
my $Hostfile = "/etc/hosts";
my $Commentfile = "";
my $Domain = "";
my $Domainfile = "";
my $RespHost = "";
my $RespUser = "";
my $DefSerial = 1;
my $DefRefresh = "3H";
my $DefRetry = "1H";
my $DefExpire = "1W";
my $DefNegCache = "10M";
my $DefTtl = "1D";
my $Need_Numeric_Ttl = 0;
my $DefMXWeight = 10;
my $Defsubnetmask = "255.255.255.0";
my $Supernetting_Enabled = 0;
my $ReportNonMatchingDomains = 1;
my $UseDefaultDomain = 0;
my $UseDateInSerial = 0;
my $Print_Sequence = 0;
my $Open_DB_Files = 0;
my $Open_File_Limit = 120;
my $Verbose = 1;
my $Gen_Count = 0;
my $CustomLogging = 0;
my $CustomOptions = 0;
my $NeedHints = 1;
my $Multi_Homed_Mode = "";
my $Check_Level = "audit";
my $RFC_952 = 0;	   # NOTE: Don't set true unless $RFC_1123 is also true.
my $RFC_1123 = 1;
my $RFC_2308 = 1;	   # New default as of version 2.40
my $RFC_2782 = 0;
my $Audit = 1;		   # DNS auditing is independent of RFC name checking.
my $DefAction = "Warning"; # Default action to take if hostnames aren't perfect.
my $Load_Status = 0;	   # Set true by READ_RRs() if BIND won't load the zone.
my $Newline_Printed = 0;
my $Preserve_Case = 0;
my $Verify_Mode = 0;
my $Recursive_Verify = 0;
my $Recursion_Depth = 0;
my $Verify_Delegations = 1;
my $Show_Single_Delegations = 1;
my $Query_External_Domains = 1;
my $Show_Chained_CNAMEs = 0;
my $Debug = 0;
my $Debug_DIR = "/tmp";
my $Glueless_Upper_Limit = 30;
my $Display_Glueless_Limit = 0;
my $Valid_SOA_Timers = 1;
my $Localhost = "127.0.0.1";
my $MakeLoopbackSOA = 1;
my $MakeLoopbackZone = 1;
my $Owner_Field = "";
my $RCfile = "";
my $Conf_Only = 0;


# ---------------------------------------------------------------------------
#
#   Default values for settings that can be customized on a site-specific
#   basis by means of a special `h2n.conf' configuration file that is
#   read at startup by the READ_RCFILE() subroutine.
#
#
# The following two data items are used in verify mode to create a sorted
# list of best possible name servers from which a zone transfer is requested.
# This helps to avoid unnecessary delays by trying name servers on local
# networks first.  The corresponding keyword in the configuration file is
# "LOCAL-NETWORKS".
#
# * The "@Local_Networks" array should be initialized to the list of
#   network(s) (in CIDR format) to which the localhost is connected,
#   e.g., a dual-homed localhost should have two entries in this array.
# * The "@Local_Subnetmasks" array should be initialized to the subnet
#   mask(s) which correspond to the network(s) in "@Local_Networks".
#
my @Local_Networks    = ("0/0");		# Set default network and mask
my @Local_Subnetmasks = ("0.0.0.0");		# for universal connectivity.

# The `h2n' program calls two external utilities, `DiG' and `check_del',
# to make various DNS queries.  The following two variables hold their
# filenames.  If not qualified with a pathname, the filename is expected
# to be found in the environment's search path, e.g., if `h2n' is run
# via cron(1M), the default PATH is usually "/usr/bin:/usr/sbin:.".
# The corresponding keywords in the configuration file are "DIG-UTILITY"
# and "CHECK_DEL-UTILITY".
#
my $DiG       = "/usr/local/bin/dig";
my $Check_Del = "/usr/local/bin/check_del";

# The DiG utility is rather patient in the time it will wait for a
# response before giving up on a name server in an NS RRset (4 seconds
# for versions 2-8.X and 5 seconds for 9.X versions).  It's also
# rather generous in the number of times each name server is retried
# (4 times for 2-8.X versions and 3 times for 9.X versions).
# There is a potential for significant delays when auditing domain
# names that point to unreachable name servers.  The following two
# variables allow these DiG parameters to be customized.
# The corresponding keywords in the configuration file are
# "DIG-TIMEOUT-LIMIT" and "DIG-RETRY-LIMIT".
#
my $DiG_Timeout = 4;
my $DiG_Retries = 2;

# The traditional advice for glue records is to use them only when
# absolutely necessary (the name server for a delegated subzone is
# itself in the subzone being delegated) and to avoid the gratuitous
# addition of glue that is not mandatory as an ad hoc, "just to be sure"
# measure.  Since glue must be kept synchronized with its authoritative
# counterparts in the delegated subzone just like the NS RRsets, this
# is usually good advice.
#
# However, name resolution suffers in the real world when sensible
# limits of recursive ("glueless") delegations are exceeded.  The
# following two variables allow for a conservative limit to be placed
# on recursive delegations that `h2n' finds in a `spcl' file when
# building zone data and a more liberal limit when verifying existing
# DNS zone data.  The corresponding keywords in the configuration file
# are "DB-GLUELESS-LIMIT" and "VERIFY-GLUELESS-LIMIT".
#
# These default values are mentioned in Section 2.3 of the document
# "Observed DNS Resolution Misbehavior" which is available online at
# < http://www.ietf.org/internet-drafts/ > as the text file
# `draft-ietf-dnsop-bad-dns-res-03.txt'.
#
my $DB_Glueless_Limit     = 1;
my $Verify_Glueless_Limit = 3;

#
# ---------------------------------------------------------------------------


# To increase the processing speed of the READ_RRs subroutine, arrange the
# set of recognized RR types in order of decreasing frequency, i.e.,
# the most common types of RRs should appear first.  There can be up to
# a 7% speed difference between best-case and worst-case ordering.
# IMPORTANT: Always use the "/o" modifier in patterns which contain the
#            static "$RRtypes" value to avoid needless recompilation
#            of the working pattern space.
#
# NOTE: * Per RFC-1035, the NULL RR is not allowed in master files and,
#         thus, the NULL RR is deliberately not recognized.
#       * Per RFC-1123, the obsolete MD and MF RR types are deliberately
#         not recognized.
#       * The meta-RRs OPT (RFC-2671), TSIG (RFC-2845), and TKEY (RFC-2930)
#         are recognized in case they appear in the output of utilities
#         such as DiG which this program may use.
#       * Per RFC-3755, the obsolete NXT record is deliberately
#         not recognized.
#
my $RRtypes = "MX|A|CNAME|PTR|NS|AAAA|HINFO|RP|TXT|SRV|SOA|KEY|NSAP|NSAP-PTR|"
	    . "NAPTR|AFSDB|RT|ISDN|X25|PX|LOC|CERT|KX|DNAME|WKS|M[BGR]|MINFO|"
	    . "EID|NIMLOC|ATMA|GPOS|APL|SINK|SSHFP|DHCID|SPF|HIP|RRSIG|NSEC|"
	    . "NSEC3|NSEC3PARAM|DS|DNSKEY|DLV|IPSECKEY|SIG|A6|TSIG|OPT|TKEY";

# Catalog the RFC-2535 DNSSEC RR types (KEY, NXT, and SIG), as well as their
# replacements from RFC-4034 (NSEC and RRSIG) that are allowed to share
# owner names with CNAMEs.
# Catalog the RFC-4034 DNSSEC RR types (NSEC and RRSIG), that are allowed
# to share owner names with CNAMEs.  Per RFC-3007, a KEY record for secure
# dynamic update purposes is also allowed to be present at a CNAME.
# IMPORTANT: Always use the "/o" modifier in patterns which contain the
#            static "$DNSSEC_RRtypes" value to avoid needless recompilation
#            of the working pattern space.
# NOTE: * Per RFC-3755, the original DNSSEC records from RFC-2535 (NXT
#         and SIG) are deliberately not recognized for DNSSEC purposes.
#
my $DNSSEC_RRtypes = "NSEC3?|RRSIG|KEY";

# Construct a table of BIND versions that are vulnerable to various bugs
# according to < http://www.isc.org/products/BIND/bind-security.html >.
# A warning will be displayed anytime `h2n' detects one of these versions.
# NOTE: The GET_BIND_VERSION() subroutine will also determine if any
#       of the following bugs should be reported as possibly present:
#
#         libbind buffer overflow
#         LIBRESOLV: buffer overrun
#         BIND: Multiple Denial of Service
#         BIND: Remote Execution of Code
#         BIND: Negative Cache DoS
#         BIND: q_usedns Array Overrun
#         BIND: Self Check Failing
#         OpenSSL buffer overflow
#         DoS internal consistency check
#
#
# NOTE: Make sure to keep the "$BIND_Bug_Titles" variable
#       current with the above list of BIND bug categories
#       that are added to the GET_BIND_VERSION() subroutine.
#
my $BIND_Bug_Titles = "libbind|LIBRESOLV|BIND|OpenSSL|DoS";

my %BIND_Bug_Index = (
 '4.8'	   => 'infoleak',
 '4.8.1'   => 'infoleak',
 '4.8.2.1' => 'infoleak',
 '4.8.3'   => 'infoleak',
 '4.9.3'   => 'complain infoleak',
 '4.9.4'   => 'complain infoleak',
 '4.9.4-P1'=> 'complain infoleak',
 '4.9.5'   => 'sig naptr maxdname complain infoleak',
 '4.9.5-P1'=> 'sig naptr maxdname complain infoleak',
 '4.9.6'   => 'sig naptr maxdname complain infoleak',
 '4.9.7'   => 'naptr maxdname complain infoleak',
 '4.9.8'   => 'naptr maxdname',
 '8.1'	   => 'sig naptr maxdname solinger fdmax infoleak',
 '8.1.1'   => 'sig naptr maxdname solinger fdmax infoleak',
 '8.1.2'   => 'naptr maxdname solinger fdmax infoleak',
 '8.1.3'   => 'naptr maxdname solinger fdmax infoleak',
 '8.2'	   => 'sigdiv0 srv nxt sig naptr maxdname solinger fdmax infoleak tsig',
 '8.2-P1'  => 'sigdiv0 srv nxt sig naptr maxdname solinger fdmax infoleak tsig',
 '8.2.1'   => 'sigdiv0 srv nxt sig naptr maxdname solinger fdmax infoleak tsig',
 '8.2.2'   => 'zxfr sigdiv0 srv naptr maxdname infoleak tsig',
 '8.2.2-P1'=> 'zxfr sigdiv0 srv naptr maxdname infoleak tsig',
 '8.2.2-P2'=> 'zxfr sigdiv0 srv infoleak tsig',
 '8.2.2-P3'=> 'zxfr sigdiv0 srv infoleak tsig',
 '8.2.2-P4'=> 'zxfr sigdiv0 srv infoleak tsig',
 '8.2.2-P5'=> 'zxfr sigdiv0 srv infoleak tsig',
 '8.2.2-P6'=> 'zxfr srv infoleak tsig',
 '8.2.2-P7'=> 'infoleak tsig',
 '8.2.2-P8'=> 'infoleak tsig',
 '8.2.3-T' => 'tsig'
);

# URLs that document the above-mentioned BIND bugs
#
my $CERT_URL_bugs      = "< http://www.cert.org/advisories/CA-2001-02.html >";
my $CERT_URL_DoS       = "< http://www.cert.org/advisories/CA-2002-15.html >";
my $CERT_URL_libbind   = "< http://www.cert.org/advisories/CA-2002-19.html >";
my $CERT_URL_openssl   = "< http://www.cert.org/advisories/CA-2002-23.html >";
my $CERT_URL_buf_DoS   = "< http://www.cert.org/advisories/CA-2002-31.html >";
my $CERT_URL_negcache  = "< http://www.kb.cert.org/vuls/id/734644 >";
my $CERT_URL_overrun   = "< http://www.kb.cert.org/vuls/id/327633 >";
my $CERT_URL_selfcheck = "< http://www.kb.cert.org/vuls/id/938617 >";
my $ISC_URL = "< http://www.isc.org/products/BIND/bind-security.html >";

my $IPv4_pattern =
            '^(?:(?:25[0-5]|(?:2[0-4]|1[0-9]|[1-9]?)[0-9])(?:[.](?=.)|\z)){4}$';

my $IPv6_pattern =
     '^((?=.*::.*)(::)?([0-9A-F]{1,4}(:(?=[0-9A-F])|(?!\2)(?!\5)(::)|\z)){0,7}|'
   . '((?=.*::.*)(::)?([0-9A-F]{1,4}(:(?=[0-9A-F])|(?!\7)(?!\10)(::))){0,5})|'
   . '(?:[0-9A-F]{1,4}:){7}[0-9A-F]{1,4})$';


my ($Audit_Domain, $BIND_Ver_Msg, $BIND_Version, $BIND_Version_Num, $Boot_Dir);
my ($BootSecAddr, $BootSecSaveAddr, $ConfSecAddr, $ConfSecSaveAddr, $DB_Dir);
my ($Data_Fname, $Debug_BIND_Version, $Del_File, $DiG_Bufsize);
my ($DiG_Version_Num, $Domain_Pattern, $Exit_Status, $Expire, $Glueless_Limit);
my ($Master_Ttl, $New_Serial, $Output_Msg, $Recursion_Limit, $Refresh, $Retry);
my ($SOA_Count, $Search_Dir, $Search_Display_Dir, $Show_Dangling_CNAMEs);
my ($Special_File, $Temp, $Ttl, $User);
my (%Aliases, %Apex_Aliases, %Apex_RRs, %Apex_Route_RRs, %Comment_RRs);
my (%Comments, %DB_Filehandle, %Dangling_CNAME_Domains, %Deferred_PTR);
my (%Ext_NS, %Hosts, %LRUtable, %MXlist, %Master_Zone_Opt, %NSlist);
my (%NSowners, %Net_Ranges, %Net_Zones, %PTR_Pat_Rel, %Partial_Servers);
my (%Pending_PTR, %RRowners, %Slave_Zone_Opt, %Spcl_AFSDB, %Spcl_CNAME);
my (%Spcl_PTR, %Spcl_RP, %Spcl_RT, %Spcl_SRV, %Wildcards, %c_Opt_Aliases);
my (%c_Opt_Pat_Rel, %c_Opt_Spec, %e_Opt_Pat_Exceptions, %p_Opt_Mode_Spec);
my (@Boot_Msgs, @Boot_Opts, @Conf_Logging, @Conf_Opts, @DNS_RRset);
my (@Dangling_CNAME_Domains, @Full_Servers, @Global_Master_Zone_Opts);
my (@Global_Slave_Zone_Opts, @MX, @Make_SOA, @Our_Addrs, @Our_Netbits);
my (@Our_Nets, @Our_Subnetmasks, @Our_Subnets, @V_Opt_Domains, @c_Opt_Patterns);
my (@e_Opt_Patterns, @p_Opt_Patterns);


autoflush STDOUT 1;		# Allows single-character output w/o newline.
autoflush STDERR 1;		# Keeps STDERR output synchronized with STDOUT.

READ_RCFILE();			# a way to override various built-in defaults
PARSE_ARGS(@ARGV);		# overrides any options found in a CONF file
FIXUP();
if ($Conf_Only) {
    #
    # We're only interested in generating the BIND
    # configuration files from the just-read options.
    #
    GEN_BOOT();
    exit;
}

$Audit = 0 if $Delegate;	# Prevent the following warning message if we
				# are generating a delegation report and DiG
				# version 9.0.0 happens to be in operation.

if ($DiG_Version_Num == 90000 && ($Verify_Mode || $Audit)) {
    ($Output_Msg = <<'EOT') =~ s/^\s+\|//gm;
    |
    |The DiG utility found by `h2n' is version 9.0. It is unsupported
    |due to its inability to echo batch file input.  Please replace it
    |with another version of DiG from either BIND 8 or the most recent
    |distribution of BIND 9.
EOT
    unless ($Verify_Mode) {
	$Output_Msg .= "The auditing option has been disabled for this run.\n";
	$Audit = 0;
    }
    print STDERR "$Output_Msg\n";
    exit(2) if $Verify_Mode;
}
# NOTE: All versions of DiG 9.0.1, while usable by `h2n', have a small
#       defect whereby the command line is not echoed whenever any kind of
#       name server connection failure is encountered.  The AUDIT_RRs()
#       subroutine treats these detected cases as a general synchronization
#       failure when parsing the output from DiG and will generate a status
#       of "[sync. error ]" for the queried domain name.
#

if ($Verify_Mode) {		# If called with -V
    VERIFY_ZONE();
    exit 0;
}

if (!$RFC_2308 || $BIND_Version_Num < 80201) {
    #
    # When in doubt, convert time intervals that may be in symbolic
    # notation to the equivalent number of seconds.  This is the
    # universally understood format.
    #
    $Need_Numeric_Ttl = 1;
    $DefRefresh	 = SECONDS($DefRefresh);
    $DefRetry	 = SECONDS($DefRetry);
    $DefExpire	 = SECONDS($DefExpire);
    $DefNegCache = SECONDS($DefNegCache);
    $DefTtl	 = SECONDS($DefTtl);
    $Refresh	 = SECONDS($Refresh) if $Refresh;
    $Retry	 = SECONDS($Retry) if $Retry;
    $Expire	 = SECONDS($Expire) if $Expire;
    $Ttl	 = SECONDS($Ttl) if $Ttl;
    $Master_Ttl	 = SECONDS($Master_Ttl) if $Master_Ttl;
print "\nDEBUG Info: \$RFC_2308         = `$RFC_2308'\n";
print "            \$DiG_Version_Num  = `$DiG_Version_Num'\n";
print "            \$BIND_Version_Num = `$BIND_Version_Num'\n\n";
}

if ($Delegate) {		# If called as "delegate" or with -D
    DELEGATE_INFO();
    exit 0;
}

# If this point is reached, then we are going to generate one
# or more DNS zone data files from an RFC-982 HOSTS.TXT file.
#
# First, check the BIND version of the master name server in the
# "-h" option and issue any warnings about known vulnerabilities.
#
if ($BIND_Ver_Msg) {
    ($Temp = $RespHost) =~ s/[.]$//;
    $BIND_Ver_Msg       =~ s/ See /See /;
    $BIND_Ver_Msg       =~ s/     </    </g;
    print STDERR "\nWarning: $Temp (-h option) is running BIND ",
		     "$BIND_Version.\n",
		     "This version of BIND may be vulnerable to the ",
		     "following bug(s):\n",
		     "$BIND_Ver_Msg\n\n";
}
print STDOUT "Initializing new database files...\n" if $Verbose;
INITDBs();
HOSTS_TO_RRs();
print STDOUT "Generating boot and conf files...\n" if $Verbose;
GEN_BOOT();
if ($Audit && $Verbose) {
    #
    # Take the opportunity to undefine some data structures that are
    # no longer needed.  The memory space can then be reused by the
    # AUDIT_RRs subroutine which itself needs to create still more
    # data structures.
    #
    undef %Aliases;
    undef %Comments;
    undef %Deferred_PTR;
    undef %Pending_PTR;
    undef %c_Opt_Aliases;
    undef %c_Opt_Spec;
    undef %p_Opt_Mode_Spec;
    undef %c_Opt_Pat_Rel;
    undef %PTR_Pat_Rel;
    undef %Comment_RRs if $Commentfile;
    undef %DB_Filehandle;
    undef %LRUtable;
    undef %Net_Ranges;
    undef %Net_Zones;
    undef %Master_Zone_Opt;
    undef %Slave_Zone_Opt;
    undef @Boot_Opts;
    undef @Conf_Logging;
    undef @Conf_Opts;
    undef @Global_Master_Zone_Opts;
    undef @Global_Slave_Zone_Opts;
    undef @Boot_Msgs;
    undef @c_Opt_Patterns;
    undef @p_Opt_Patterns;
    undef @e_Opt_Patterns;
    undef @Make_SOA;

    # As a paranoid exercise, make sure the "$Data_Fname" variable
    # undergoes the same sanitation as is performed in the VERIFY_ZONE
    # subroutine so that there are no nasty surprises with temporary
    # filenames that can't be created.
    #
    $Data_Fname = lc($Domain);		# override a -P option
    for ($Data_Fname) {
	s/\\([<|>&\(\)\$\?@;'`])/$1/g;	# unescape special characters
	s/[\/<|>&\[\(\)\$\?;'`]/%/g;	# change the problematic ones to "%"
	s/\\\s/_/g;			# change white space into underscores
	s/\\//g;			# remove remaining escape characters
    }

    print STDOUT "Checking NS, MX, and other RRs ",
		 "for various improprieties...\n";
    AUDIT_RRs(0);
}
if (($Load_Status == 2 && $DefAction eq "Skipping") || $Load_Status > 2) {
    ($Output_Msg = <<'EOT') =~ s/^\s+\|//gm;
    |Attention! One or more of the above errors is sufficiently severe to
    |           either prevent the zone from being loaded or the bad data
    |           may cause interoperability problems with other name servers.
EOT
    print STDERR "$Output_Msg\n" if $Verbose;
    $Exit_Status = 1;
} else {
    $Exit_Status = 0;
}
print STDOUT "Done.\n" if $Verbose;
exit($Exit_Status);
